function debounce<T extends (...args: any[]) => void>(
  func: T,
  wait: number
): T {
  let timeout: ReturnType<typeof setTimeout> | undefined;
  return ((...args: any[]) => {
    if (timeout) clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  }) as T;
}

export default function MapPanel({ initialShipData }: MapPanelProps) {
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [shipData, setShipData] = useState<ShipData[]>(initialShipData);
  const [connectionStatus, setConnectionStatus] = useState<
    "connected" | "disconnected" | "error"
  >("disconnected");
  const [selectedShip, setSelectedShip] = useState<ShipData | null>(null);
  const mapRef = useRef(null);
  const eventSourceRef = useRef<EventSource | null>(null);

  // Load cached data on mount
  useEffect(() => {
    if (typeof window !== "undefined") {
      try {
        const cachedData = localStorage.getItem(CACHE_KEY);
        if (cachedData) {
          setShipData(JSON.parse(cachedData));
        }
      } catch (error) {
        console.error("Error accessing localStorage:", error);
      }
    }
  }, []);

  const updateShipData = debounce((newShip: ShipData) => {
    setShipData((prev) => {
      const existingShips = prev.map((ship) =>
        ship.Metadata.MMSI === newShip.Metadata.MMSI
          ? { ...ship, ...newShip }
          : ship
      );
      const updatedData = existingShips.some(
        (ship) => ship.Metadata.MMSI === newShip.Metadata.MMSI
      )
        ? existingShips
        : [...existingShips, newShip].slice(-100);

      if (typeof window !== "undefined") {
        localStorage.setItem(CACHE_KEY, JSON.stringify(updatedData));
      }
      return updatedData;
    });
  }, 300);

  useEffect(() => {
    const setupEventSource = () => {
      if (eventSourceRef.current) {
        eventSourceRef.current.close();
      }

      setConnectionStatus("disconnected");
      const source = new EventSource(API_URL);
      eventSourceRef.current = source;

      source.onopen = () => {
        setConnectionStatus("connected");
      };

      source.onmessage = (event) => {
        try {
          const newShip: ShipData = JSON.parse(event.data);
          updateShipData(newShip);
        } catch (err) {
          console.error("Error parsing ship data:", err);
        }
      };

      source.onerror = () => {
        setConnectionStatus("error");
        source.close();
        setTimeout(setupEventSource, 5000);
      };
    };

    setupEventSource();

    return () => {
      if (eventSourceRef.current) {
        eventSourceRef.current.close();
      }
    };
  }, []);

  const toggleFullscreen = () => setIsFullscreen((prev) => !prev);

  return (
    <div
      className={`relative ${
        isFullscreen ? "fixed inset-0 z-50 p-0" : "h-[600px] rounded-lg"
      }`}
    >
      <Map
        ref={mapRef}
        initialViewState={{
          longitude: CENTER_LON,
          latitude: CENTER_LAT,
          zoom: 6,
        }}
        style={{ width: "100%", height: "100%" }}
        mapStyle="https://demotiles.maplibre.org/style.json"
        minZoom={5}
        maxZoom={10}
      >
        <NavigationControl position="top-right" />
        {shipData.map((ship) => (
          <Marker
            key={`${ship.Metadata.MMSI}-${ship.PositionReport.Latitude}-${ship.PositionReport.Longitude}`}
            longitude={ship.PositionReport.Longitude}
            latitude={ship.PositionReport.Latitude}
          >
            <div
              className="w-0 h-0 border-l-[8px] border-l-transparent border-r-[8px] border-r-transparent border-b-[16px] border-b-blue-500 transform -rotate-45 cursor-pointer"
              onMouseEnter={() => setSelectedShip(ship)}
              onMouseLeave={() => setSelectedShip(null)}
            />
          </Marker>
        ))}
        {selectedShip && (
          <Popup
            longitude={selectedShip.PositionReport.Longitude}
            latitude={selectedShip.PositionReport.Latitude}
            anchor="bottom"
            closeButton={false}
            closeOnClick={false}
          >
            <div className="flex flex-col gap-2 p-2">
              <p className="text-sm">
                <span className="font-semibold">Ship Name:</span>{" "}
                {selectedShip.Metadata.ShipName || "N/A"}
              </p>
              <p className="text-sm">
                <span className="font-semibold">MMSI:</span>{" "}
                {selectedShip.Metadata.MMSI || "N/A"}
              </p>
              <p className="text-sm">
                <span className="font-semibold">Navigational Status:</span>{" "}
                {selectedShip.PositionReport.NavigationalStatus || "N/A"}
              </p>
            </div>
          </Popup>
        )}
      </Map>
      <Button
        onClick={toggleFullscreen}
        className="absolute bottom-4 right-4 z-10"
      >
        {isFullscreen ? <Minimize2 /> : <Maximize2 />}
      </Button>
    </div>
  );
}